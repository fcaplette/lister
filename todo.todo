✘ Change Webpack config for CSS loader to see classnames @cancelled(19-09-04 08:12)
✔ Implement the state structure + utils to modify the state @done(19-04-14 13:25)
✔ Implement Todo components (list and item) @done(19-04-14 13:25)
✔ Implement "Add todo" button in TodoMain component @done(19-04-14 13:25)
✔ Default View to Show Active @done(19-04-14 13:53)
✔ Style the todo Item component @done(19-04-15 07:14)
✔ Create a checkbox for complete todos @done(19-04-14 13:54)
✔ Animate the fading out of done todos @done(19-04-14 14:07)
✔ Add the edit todo on each individual todo @done(19-04-15 07:59)
✔ Animate todos that are completed @done(19-04-15 08:00)
✔ Add priority when creating a todo @done(19-04-23 07:16)
✔ Add Dropdown menu to set priority @done(19-04-23 07:16)
✔ Add tests for redux state @done(19-04-24 07:26)
✔ Create Text input @done(19-04-17 07:26)
✔ Add Ability to set a due date @done(19-05-10 07:34)
✔ Add warning when a todo is past (date becomes red) @done(19-05-10 16:23)
✔ Sort by date and priority @done(19-05-15 08:34)
✔ Add ability to set a priority @done(19-04-23 07:17)
✘ Add sections for each date @cancelled(19-05-10 07:34)
✔ Sort each section by priority @done(19-04-23 07:17)
✔ Move the nav center on desktop @done(19-04-24 07:14)
✔ Handle enter inputs @done(19-04-23 07:17)
✔ Animate the list when one element is completed @done(19-04-14 14:20)
✔ Make list scrolable (Fix height + scroll) @done(19-05-10 15:46)
✔ Add Tests for function sort by priority @done(19-05-17 08:04)
✔ Create Login page @done(19-04-24 07:14)
✔ Create Signup page @done(19-04-24 07:14)
✔ Add logout option in menu @done(19-04-24 07:14)
✔ Add logic to allow user to logout @done(19-05-17 08:04)
✔ Handle focus out of inputs leave edit mode @done(19-05-17 07:35)
✔ Update the colors of the app @done(19-05-15 08:34)
✔ Make each item in the list have more spacing @done(19-05-10 15:46)
✔ Fix animation when completing a todo @done(19-05-15 08:34)
✔ Fix date being invalid when not adding one to a todo @done(19-05-10 15:46)
✔ Add ability to edit the date @done(19-05-10 15:46)
✔ Update fonts of the app @done(19-05-15 08:34)
✔ Change the h3 styling (create a component for sectionHeader) @done(19-05-17 07:35)
✘ Handle yesterday, today and tomorrow @cancelled(19-05-10 15:46)
✔ Update style of login @done(19-08-24 09:50)
✔ Update style of signup @done(19-08-24 09:50)
☐ catch error when signup occurs, don't redirect to login
✔ Logout - Remove cookie @done(19-08-24 13:18)
✔ Fetch user and todos when in the todoList @done(19-08-24 15:19)
✔ Patch a todo to allow it to be completed @done(19-09-04 08:22)
✔ Patch a todo to allow it to change date @done(19-09-04 08:12)
✔ Patch a todo to allow it to change text @done(19-09-04 08:12)
✔ Patch a todo to allow it to change priority @done(19-09-04 08:12)
✔ Fix edit date calendar close on click @done(19-09-04 16:36)
✔ Fix Todo complete animation @done(19-09-04 16:23)
☐ Animate menu
☐ Allow user to pick a date if none were set (Bug)
☐ Add smaller limit to todo element
✔ Allow todo text to be multilines @done(19-09-04 17:03)
☐ get the user ID from the token (store token in DB?)
☐ Switch DB to be PROD ready
☐ Handle redirection with NextJs before the rendering if a user is not connected
✔ Post a todo @done(19-08-24 16:54)





Next.js take care of handling which component is rendered in which route. Check more about initialProps (From API?)
The app witll have 4 routes
    --> /login       (Cannot be accessed with token, redirect to /)
    --> /signup      (Cannot be accessed with token, redirect to /)
    --> /            (TODOS live here)
    --> /about       (Open source project, author, etc)

The / route will be the main app and the first thing to be developed.
The initial flow is that upon connected, you will have an empty list of todo (develop empty state)
and one call to action (Add your first TODO). When clicking on that initial button, a modal will open up.

The TODO modal:
Inside the modal, you have a simple text input with a placeholder: Add your TODO here.
There must be a secondary field for the date. Check the best solution to pick user date and add it 
to the DB and state (can you store a luxon `Date` value?). You could have a see more options for your todo
in which you could set the priority level (potentially also if this todo is recurrent).
Click enter and your just added your todo.

The Sorting:
    --> By Date
    --> If same date, then by priority

Filtering:
    --> By State (TODO, COMPLETED)

Each todo item can be completed by clicking the circle. An animation checks it and then it is completed.
You need a setting to decide if you show completed elements. 

The API:
API is in python with Flask framework and the DB is MySQL.
This would need to live on a different server which mean that it will need to handle CORS (Cross-origin request server).


Todo => call update from the comp

One event handler that just pass all the value to the action. 
Then the action pass all of that to the API, doesn't know what changed.
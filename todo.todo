☐ Change Webpack config for CSS loader to see classnames
✔ Implement the state structure + utils to modify the state @done(19-04-14 13:25)
✔ Implement Todo components (list and item) @done(19-04-14 13:25)
✔ Implement "Add todo" button in TodoMain component @done(19-04-14 13:25)
✔ Default View to Show Active @done(19-04-14 13:53)
✔ Style the todo Item component @done(19-04-15 07:14)
✔ Create a checkbox for complete todos @done(19-04-14 13:54)
✔ Animate the fading out of done todos @done(19-04-14 14:07)
✔ Add the edit todo on each individual todo @done(19-04-15 07:59)
✔ Animate todos that are completed @done(19-04-15 08:00)
✔ Add priority when creating a todo @done(19-04-23 07:16)
✔ Add Dropdown menu to set priority @done(19-04-23 07:16)
✔ Add tests for redux state @done(19-04-24 07:26)
✔ Create Text input @done(19-04-17 07:26)
✔ Add Ability to set a due date @done(19-05-10 07:34)
☐ Add warning when a todo is past (date becomes red)
✔ Add ability to set a priority @done(19-04-23 07:17)
✘ Add sections for each date @cancelled(19-05-10 07:34)
✔ Sort each section by priority @done(19-04-23 07:17)
✔ Move the nav center on desktop @done(19-04-24 07:14)
✔ Handle enter inputs @done(19-04-23 07:17)
✔ Animate the list when one element is completed @done(19-04-14 14:20)
☐ Make list scrolable (Fix height + scroll)
☐ Refactor state so that todo id is the key to an object
✔ Create Login page @done(19-04-24 07:14)
✔ Create Signup page @done(19-04-24 07:14)
✔ Add logout option in menu @done(19-04-24 07:14)
☐ Add logic to allow user to logout
☐ Update the colors of the app
☐ Make each item in the list have more spacing
☐ Fix animation when completing a todo
☐ Fix date being invalid when not adding one to a todo
☐ Add ability to edit the date
☐ Update fonts of the app
☐ Change the h3 styling (create a component for sectionHeader)
☐ Handle yesterday, today and tomorrow




Next.js take care of handling which component is rendered in which route. Check more about initialProps (From API?)
The app witll have 4 routes
    --> /login       (Cannot be accessed with token, redirect to /)
    --> /signup      (Cannot be accessed with token, redirect to /)
    --> /            (TODOS live here)
    --> /about       (Open source project, author, etc)
    --> /preferences (Where user can logout, see information about account, etc) 

The / route will be the main app and the first thing to be developed.
The initial flow is that upon connected, you will have an empty list of todo (develop empty state)
and one call to action (Add your first TODO). When clicking on that initial button, a modal will open up.

The TODO modal:
Inside the modal, you have a simple text input with a placeholder: Add your TODO here.
There must be a secondary field for the date. Check the best solution to pick user date and add it 
to the DB and state (can you store a luxon `Date` value?). You could have a see more options for your todo
in which you could set the priority level (potentially also if this todo is recurrent).
Click enter and your just added your todo.

The Filter menu:
There will be a filter option with the following state: 
    --> All
    --> By Date
    --> By State (TODO, COMPLETED)
    --> By Priority (LOW, MEDIUM, HIGH, URGENT)

Each todo item can be completed by clicking the circle. And animation checks it and then it is completed.
You need a setting to decide if you show completed elements. 

The API:
API will most likely be in python with Flask/Django framework and the DB would be MySQL.
This would need to live on a different server which mena that it will need to handle CORS (Cross-origin request server).